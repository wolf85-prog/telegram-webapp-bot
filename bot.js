require("dotenv").config();

//telegram api
const TelegramBot = require('node-telegram-bot-api');
const {menuOptions, backOptions} = require('./options')
const token = process.env.TELEGRAM_API_TOKEN
const bot = new TelegramBot(token, {polling: true});
const { Op } = require('sequelize')

// web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const webAppUrl = process.env.WEB_APP_URL;

//socket.io
const {io} = require("socket.io-client")

//fetch api
const fetch = require('node-fetch');

//–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
var cron = require('node-cron');

//notion api
const { Client } = require("@notionhq/client");
const notion = new Client({ auth: process.env.NOTION_API_KEY });
const token_fetch = 'Bearer ' + process.env.NOTION_API_KEY;
const databaseId = process.env.NOTION_DATABASE_ID
const databaseAddressId = process.env.NOTION_DATABASE_ADDRESS_ID
const databaseWorkersId = process.env.NOTION_DATABASE_WORKERS_ID
const databaseManagerId = process.env.NOTION_DATABASE_MANAGER_ID
const chatGroupId = process.env.CHAT_GROUP_ID
const chatTelegramId = process.env.CHAT_ID
const chatGiaId = process.env.GIA_CHAT_ID

var projectId, projectName, projectDate, projectTime, dateStart, manager_id, company_id, Geo, Teh, Worklist, Equipmentlist
var blockId

//functions
const newDatabase2 = require('./bot/common/newDatabase2')

const fs = require('fs');
const express = require('express');
const cors = require('cors');
const https = require('https');
const router = require('./bot/routes/index')
const errorHandler = require('./bot/middleware/ErrorHandling')
const path = require('path')

//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î PostreSQL
const sequelize = require('./bot/connections/db')
const {UserBot, Message, Conversation} = require('./bot/models/models')

const app = express();

app.use(express.json());
app.use(cors());
app.use(express.static('telegram-webapp-bot'));
app.use(express.static(path.resolve(__dirname, 'static')))
app.use('/', router)

// Certificate
const privateKey = fs.readFileSync('privkey.pem', 'utf8'); //fs.readFileSync('/etc/letsencrypt/live/proj.uley.team/privkey.pem', 'utf8');
const certificate = fs.readFileSync('cert.pem', 'utf8'); //fs.readFileSync('/etc/letsencrypt/live/proj.uley.team/cert.pem', 'utf8');
const ca = fs.readFileSync('chain.pem', 'utf8'); //fs.readFileSync('/etc/letsencrypt/live/proj.uley.team/chain.pem', 'utf8');

const credentials = {
    key: privateKey,
    cert: certificate,
    ca: ca
};

const httpsServer = https.createServer(credentials, app);

//--------------------------------------------------------------------------------------------------------
//              REQUEST
//--------------------------------------------------------------------------------------------------------

//—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø—Ä–æ–µ–∫—Ç–∞) –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
app.post('/web-data', async (req, res) => {
    const {queryId, projectname, datestart, geo, teh, managerId, companyId, worklist = [], equipmentlist = []} = req.body;
    const d = new Date(datestart);
    const year = d.getFullYear();
    const month = String(d.getMonth()+1).padStart(2, "0");
    const day = String(d.getDate()).padStart(2, "0");
    const chas = d.getHours();
    const minut = String(d.getMinutes()).padStart(2, "0");
    try {
        await bot.answerWebAppQuery(queryId, {
            type: 'article',
            id: queryId,
            title: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
            input_message_content: {
                parse_mode: 'HTML',
                message_text: 
  `–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
  
  <b>–ü—Ä–æ–µ–∫—Ç:</b> ${projectname} 
  <b>–î–∞—Ç–∞:</b> ${day}.${month}.${year}
  <b>–í—Ä–µ–º—è:</b> ${chas}:${minut} 
  <b>–ê–¥—Ä–µ—Å:</b> ${geo} 
  <b>–¢–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ:</b> ${teh}
  
<b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:</b>  
${worklist.map(item =>' - ' + item.spec + ' = ' + item.count + ' —á–µ–ª.').join('\n')}

<b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>  
${equipmentlist.map(item =>' - ' + item.subname + ' = ' + item.count + ' —à—Ç.').join('\n')}`
              }
        })

        
        //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç-–∞–¥–º–∏–Ω–∫—É
        await bot.sendMessage(chatGroupId, 
  `–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! 
  
  –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:  ${projectname} 
  –î–∞—Ç–∞: ${day}.${month}.${year}
  –í—Ä–µ–º—è: ${chas}:${minut} 
  –ê–¥—Ä–µ—Å: ${geo} 
  –¢–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ: ${teh} 
  
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:  
${worklist.map(item => ' - ' + item.spec + ' = ' + item.count + ' —á–µ–ª.').join('\n')}

–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:  
${equipmentlist.map(item =>' - ' + item.subname + ' = ' + item.count + ' —à—Ç.').join('\n')}`
          )
  
          projectName = projectname
          projectDate = `${day}.${month}`
          projectTime = `${chas}:${minut}`
          dateStart = datestart
          Teh = teh
          Worklist = worklist
          Equipmentlist = equipmentlist 
          manager_id = managerId
          company_id = companyId
          Geo = geo        
  
        return res.status(200).json({});
    } catch (e) {
        return res.status(500).json({})
    }
})

//-------------------------------------------------------------------------------
//------------------ –§—É–Ω–∫—Ü–∏–∏ ----------------------------------------------------
//-------------------------------------------------------------------------------

//–ø–æ–ª—É—á–∏—Ç—å id –±–ª–æ–∫–∞ –∑–∞–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ id
async function getBlocks(blockId) {
    try {
        const response = await notion.blocks.children.list({
            block_id: blockId,
        });

        let count = 0;

        const responseResults = response.results.map((block) => {
            //if (block.child_database.title == "–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤" || block.child_database.title == "–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ")
            if (block.child_database) {
                count++;
            }
        });

        let res;
        (count >1) ? res = response.results[1].id : res = response.results[0].id     
        
        console.log("Blocks Data: "  + res)

        return res;
    } catch (error) {
        console.error(error.body)
    }
}


//–ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É ID
async function getDatabaseId(baseId) {
    try {
        const response = await notion.databases.query({
            database_id: baseId
        });

        const responseResults = response.results.map((page) => {
            return {
               //id: page.id,
               fio: page.properties["2. üë∑ –§–ò–û"].relation[0]?.id,
               title: page.properties["3. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"].multi_select[0]?.name              
            };
        });

        return responseResults;
    } catch (error) {
        console.error(error.body)
    }
}

//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Notion (addProject send data to notion)
async function addProject(title, time, teh, managerId, companyId, worklist, equipmentlist, geoId) {
    try {
        const response = await notion.pages.create({
            parent: { database_id: databaseId },
            icon: {
                type: "emoji",
                emoji: "üü¶"
            },
            properties: {
                Name: {
                    title:[
                        {
                            "text": {
                                "content": title
                            }
                        }
                    ]
                },
                Date: {
                    type: 'date',
                    date: {
                        "start": time,
                        "end": null,
                        "time_zone": "Europe/Moscow"
                    }
                },
                TechZadanie: {
                    type: 'rich_text',
                    rich_text: [
                        {
                            type: 'text',
                            text: {
                                content: teh,
                            },
                        }
                        ],
                },
                Status: {
                    type: 'select',
                    select: {
                        "id": "4f52b59e-2d7f-4a13-976f-f9773274825d",
                        "name": "New",
                        "color": "blue"
                    }
                },
                City: {
                    type: 'select',
                    select: {
                        "id": "4e370773-fb5d-4ef7-bd2a-eaa91e5919e0",
                        "name": "Test",
                        "color": "brown"
                    }
                },
                Manager: {
                    type: "relation",
                    relation: [
                        {
                            "id": managerId
                        }
                    ]
                },
                Company: {
                    type: "relation",
                    relation: [
                        {
                            "id": companyId
                        }
                    ]
                },
                "–ü–ª–æ—â–∞–¥–∫–∞": {
                    "type": "relation",
                    "relation": [
                        {
                            "id": geoId
                        }
                    ],
                    "has_more": false
                }
            }
        })
        //console.log(response)
        const res_id = response.id;
        console.log(new Date())
        console.log("1 Success! Project with geo added. " + res_id)

        //setTimeout(()=> {
            newDatabase_1(res_id);
        //}, 2000) 

        setTimeout(()=> {
            newDatabase(res_id, worklist);
        }, 4000) 

        setTimeout(()=> {
            newDatabase_3(res_id);
        }, 9000)

        setTimeout(()=> {
            newDatabase4(res_id, equipmentlist);
        }, 13000) 

        return res_id;

    } catch (error) {
        console.error(error.body)
    }
}


//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Notion –±–µ–∑ –∞–¥—Ä–µ—Å–∞ (addProjectNotGeo)
async function addProjectNotGeo(title, time, teh, managerId, companyId, worklist, equipmentlist) {
    try {
        const response = await notion.pages.create({
            parent: { database_id: databaseId },
            icon: {
                type: "emoji",
                emoji: "üü¶"
            },
            properties: {
                Name: {
                    title:[
                        {
                            "text": {
                                "content": title
                            }
                        }
                    ]
                },
                Date: {
                    type: 'date',
                    date: {
                        "start": time,
                        "end": null,
                        "time_zone": "Europe/Moscow"
                    }
                },
                TechZadanie: {
                    type: 'rich_text',
                    rich_text: [
                        {
                            type: 'text',
                            text: {
                                content: teh,
                            },
                        }
                        ],
                },
                Status: {
                    type: 'select',
                    select: {
                        "id": "4f52b59e-2d7f-4a13-976f-f9773274825d",
                        "name": "New",
                        "color": "blue"
                    }
                },
                City: {
                    type: 'select',
                    select: {
                        "id": "4e370773-fb5d-4ef7-bd2a-eaa91e5919e0",
                        "name": "Test",
                        "color": "brown"
                    }
                },
                Manager: {
                    type: "relation",
                    relation: [
                        {
                            "id": managerId
                        }
                    ]
                },
                Company: {
                    type: "relation",
                    relation: [
                        {
                            "id": companyId
                        }
                    ]
                },
            }
        })
        //console.log(response)
        const res_id = response.id;
        console.log(new Date())
        console.log("Success! Project not geo added. " + res_id)        

        newDatabase_1(res_id);

        setTimeout(()=> {
             newDatabase(res_id, worklist);
        }, 4000) 

        setTimeout(()=> {
            newDatabase_3(res_id);
        }, 9000) 

        setTimeout(()=> {
            newDatabase4(res_id, equipmentlist);
        }, 13000) 

        return res_id;

    } catch (error) {
        console.error(error.body)
    }
}

//-----------------------------------------------------------------------------------

//—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"
async function newDatabase_1(parent_page_id) {
    try {
        const body = {
            "parent": {
                "type": "page_id",
                "page_id": parent_page_id
            },
            "title": [
                {
                    "type": "text",
                    "text": {
                        "content": "–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞"
                    }
                }
            ],
            "is_inline": true,
            "properties": {  
                "Name": {
                    "title": {}
                },              
                "Date": {
                    "date": {}
                },
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": {
                    "rich_text": {}
                }               
            }
        }

        // —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞"
        const response = await fetch('https://api.notion.com/v1/databases', {
            method: 'post',
            body: JSON.stringify(body),
            headers: {
                'Authorization': token_fetch, //`Bearer ${token}`
                'Content-Type': 'application/json', 
                accept: 'application/json',
                'Notion-Version': '2022-06-28'
            }
        });
        const data = await response.json();
        console.log("2.1 Success! Grafik project added. Database_id: " + data.id) // + " data: " + JSON.stringify(data))

        //–¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—ã (–î–µ–Ω—å2, –î–µ–Ω—å3, –î–µ–Ω—å4)
        addDate(data.id, '–î–µ–Ω—å ‚Ññ4');
        setTimeout(()=> {
            addDate(data.id, '–î–µ–Ω—å ‚Ññ3');
        }, 2000)  
        setTimeout(()=> {
            addDate(data.id, '–î–µ–Ω—å ‚Ññ2');
        }, 4000) 
        
    } catch (error) {
        console.error(error.body)
    }
}

//send data to notion
async function addDate(blockId, day) {
    try {
        const response = await notion.pages.create({
            parent: { database_id: blockId },
            properties: {
                Name: {
                    type: "title",
                    title: [
                        {
                            "type": "text",
                            "text": {
                                "content": day,
                                "link": null
                            },
                            "annotations": {
                                "bold": false,
                                "italic": false,
                                "strikethrough": false,
                                "underline": false,
                                "code": false,
                                "color": "default"
                            },
                            "plain_text": day,
                            "href": null
                        }
                    ]
                },
                Date : {
                    type: 'date',                   
                    date: {
                        "start": "2023-01-01T00:00:00.000",
                        "end": null,
                        "time_zone": "Europe/Moscow"
                    }

                }
            }
        })
        //console.log(response)
        console.log("3.1 Success! Date added. Data: "  + response.id)//+ JSON.stringify(response))
    } catch (error) {
        console.error(error.body)
    }
}


//send create db notion
async function newDatabase(parent_page_id, worklist) {
    try {
        const body = {
            "parent": {
                "type": "page_id",
                "page_id": parent_page_id
            },
            "title": [
                {
                    "type": "text",
                    "text": {
                        "content": "–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤"
                    }
                }
            ],
            "is_inline": true,
            "properties": { 
                "Name": {
                    "title": {}
                },
                "1. –î–∞—Ç–∞": {
                    "date": {}
                },
                "2. üë∑ –§–ò–û": {    
                    "name": "üë∑ –§–ò–û",               
                    "type": "relation",
                    "relation": {
                        "database_id": databaseWorkersId,
                        "single_property": {}
                    }
                },
                "3. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": {
                    "multi_select": {
                        "options": [
                            {
                                "name": "Sound",
                                "color": "blue"
                            },
                            {
                                "name": "Light",
                                "color": "yellow"
                            },
                            {
                                "name": "Video",
                                "color": "green"
                            },
                            {
                                "name": "Riggers",
                                "color": "orange"
                            },
                            {
                                "name": "Stagehands",
                                "color": "blue"
                            },
                            {
                                "name": "Stage Ground",
                                "color": "green"
                            },
                            {
                                "name": "Trucks",
                                "color": "yellow"
                            },
                            {
                                "name": "Production",
                                "color": "orange"
                            }
                        ]
                    }
                },
                "4. –ú–µ—Ä—á": {
                    "name": "–ú–µ—Ä—á",
                    "type": "checkbox",
                    "checkbox": {}
                },
                "5. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": {
                    "rich_text": {}
                },
                "6. –†–µ–π—Ç–∏–Ω–≥": {
                    "rich_text": {}
                },
                "7. –¢–∞–∫—Å–∏": {
                    "name": "–¢–∞–∫—Å–∏",
                    "type": "checkbox",
                    "checkbox": {}
                },
            }
        }

        // —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤"
        const response = await fetch('https://api.notion.com/v1/databases', {
            method: 'post',
            body: JSON.stringify(body),
            headers: {
                'Authorization': token_fetch, //`Bearer ${token}`
                'Content-Type': 'application/json', 
                accept: 'application/json',
                'Notion-Version': '2022-06-28'
            }
        });
        const data = await response.json();
        console.log("2 Success! Maincast added. Database_id: " + data.id)// + " data: " + JSON.stringify(data))

        //–¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
        worklist.forEach((worker, index) => {
            if (worker.count > 1) {
                for (let i = 0; i < worker.count; i++) {
                    addWorker(data.id, worker.icon)
                }
            } else {
                addWorker(data.id, worker.icon)
            }          
        });
        
    } catch (error) {
        console.error(error.body)
    }
}

//send data to notion
async function addWorker(blockId, worker) {
    try {
        const response = await notion.pages.create({
            parent: { database_id: blockId },
            properties: {
                "1. –î–∞—Ç–∞": {
                    type: 'date',                   
                    date: {
                        "start": "2023-01-01T00:00:00.000",
                        "end": null,
                        "time_zone": "Europe/Moscow"
                    }

                },
                "3. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": {
                    type: "multi_select",
                    multi_select: [
                        {
                            "name": worker
                        }
                    ]
                }
            }
        })
        //console.log(response)
        console.log("3 Success! Worker added. Data: " + response.id) //+ JSON.stringify(response))
    } catch (error) {
        console.error(error.body)
    }
}



// —Å–æ–∑–¥–∞–Ω–∏–µ –ë–î "–ó–∞–ø–∞—Å–Ω–æ–π —Å–æ—Å—Ç–∞–≤"
async function newDatabase_3(parent_page_id) {
    try {
        const body = {
            "parent": {
                "type": "page_id",
                "page_id": parent_page_id
            },
            "title": [
                {
                    "type": "text",
                    "text": {
                        "content": "–ó–∞–ø–∞—Å–Ω–æ–π —Å–æ—Å—Ç–∞–≤"
                    }
                }
            ],
            "is_inline": true,
            "properties": {                
                "Name": {
                    "title": {}
                },
                "1. –î–∞—Ç–∞": {
                    "date": {}
                },
                "2. üë∑ –§–ò–û": {    
                    "name": "üë∑ –§–ò–û",               
                    "type": "relation",
                    "relation": {
                        "database_id": databaseWorkersId,
                        "single_property": {}
                    }
                },
                "3. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": {
                    "multi_select": {
                        "options": [
                            {
                                "name": "Sound",
                                "color": "blue"
                            },
                            {
                                "name": "Light",
                                "color": "yellow"
                            },
                            {
                                "name": "Video",
                                "color": "green"
                            },
                            {
                                "name": "Riggers",
                                "color": "orange"
                            },
                            {
                                "name": "Stagehands",
                                "color": "blue"
                            },
                            {
                                "name": "Stage Ground",
                                "color": "green"
                            },
                            {
                                "name": "Trucks",
                                "color": "yellow"
                            },
                            {
                                "name": "Production",
                                "color": "orange"
                            }
                        ]
                    }
                },
                "4. –ú–µ—Ä—á": {
                    "name": "–ú–µ—Ä—á",
                    "type": "checkbox",
                    "checkbox": {}
                },
                "5. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": {
                    "rich_text": {}
                },
                "6. –†–µ–π—Ç–∏–Ω–≥": {
                    "rich_text": {}
                }
            }
        }

        // —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–ó–∞–ø–∞—Å–Ω–æ–π —Å–æ—Å—Ç–∞–≤"
        const response = await fetch('https://api.notion.com/v1/databases', {
            method: 'post',
            body: JSON.stringify(body),
            headers: {
                'Authorization': token_fetch, //`Bearer ${token}`
                'Content-Type': 'application/json', 
                accept: 'application/json',
                'Notion-Version': '2022-06-28'
            }
        });
        const data = await response.json();
        console.log("2.3 Success! Secondcast added. Database_id: " + data.id)// + " data: " + JSON.stringify(data))
        
        addWorkerZapas(data.id);
        addWorkerZapas(data.id);

    } catch (error) {
        console.error(error.body)
    }
}

//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É "–ó–∞–ø–∞—Å–Ω–æ–π —Å–æ—Å—Ç–∞–≤"
async function addWorkerZapas(blockId) {
    try {
        const response = await notion.pages.create({
            parent: { database_id: blockId },
            properties: {
                "1. –î–∞—Ç–∞": {
                    type: 'date',                   
                    date: {
                        "start": "2023-01-01T00:00:00.000",
                        "end": null,
                        "time_zone": "Europe/Moscow"
                    }

                }
            }
        })
        //console.log(response)
        console.log("3.3 Success! Worker zapas added. Data: " + response.id) //JSON.stringify(response))
    } catch (error) {
        console.error(error.body)
    }
}

async function newDatabase4(parent_page_id, equipmentlist) {
    //—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
    try {
        const body = {
            "parent": {
                "type": "page_id",
                "page_id": parent_page_id
            },
            "title": [
                {
                    "type": "text",
                    "text": {
                        "content": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
                    }
                }
            ],
            "is_inline": true,
            "properties": {              
                "–î–∞—Ç–∞": {
                    "date": {}
                },
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": {
                    "multi_select": {
                        "options": [
                            {
                                "name": "Sound",
                                "color": "blue"
                            },
                            {
                                "name": "Light",
                                "color": "yellow"
                            },
                            {
                                "name": "Video",
                                "color": "green"
                            },
                            {
                                "name": "Riggers",
                                "color": "orange"
                            },
                            {
                                "name": "Stage Ground",
                                "color": "green"
                            },
                            {
                                "name": "Trucks",
                                "color": "yellow"
                            },
                            {
                                "name": "Production",
                                "color": "orange"
                            }
                        ]
                    }
                },
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": {
                    "title": {}
                },                 
            }
        }

        // —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
        const response = await fetch('https://api.notion.com/v1/databases', {
            method: 'post',
            body: JSON.stringify(body),
            headers: {
                'Authorization': token_fetch, //`Bearer ${token}`
                'Content-Type': 'application/json', 
                accept: 'application/json',
                'Notion-Version': '2022-06-28'
            }
        });
        const data = await response.json();
        console.log("4. Success! Equipments added. Database_id: " + data.id) // + " data: " + JSON.stringify(data))

        //console.log("equipmentlist: ", equipmentlist)

        //–¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤

        equipmentlist.forEach((equipment, index) => {
            if (equipment.count > 1) {
                for (let i = 0; i < equipment.count; i++) {
                    addEquipment(data.id, equipment.cat)
                    //console.log("equipment: ", equipment)
                }
                //addEquipment(data.id, equipment.cat)
            } else {
                addEquipment(data.id, equipment.icon)
            }          
        });
        
    } catch (error) {
        console.error(error.body)
    }   
}

//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
async function addEquipment(blockId, equipment) {
    try {
        const response = await notion.pages.create({
            parent: { database_id: blockId },
            properties: {
                "–î–∞—Ç–∞": {
                    type: 'date',                   
                    date: {
                        "start": "2023-01-01T00:00:00.000",
                        "end": null,
                        "time_zone": "Europe/Moscow"
                    }

                },
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": {
                    type: "multi_select",
                    multi_select: [
                        {
                            "name": equipment
                        }
                    ]
                }
            }
        })
        //console.log(response)
        console.log("3 Success! Equipment added. Data: " + response.id) //+ JSON.stringify(response))
    } catch (error) {
        console.error(error.body)
    }
}


//send data to notion
async function addAddress(geo, projectname, datestart, teh, managerId, companyId, worklist, equipmentlist) {
    try {
        const response = await notion.pages.create({
            parent: { database_id: databaseAddressId },
            properties: {
                "–ù–∞–∑–≤–∞–Ω–∏–µ": {
                    type: "title",
                    title: [
                        {
                            type: "text",
                            text: {
                                content: geo,
                                "link": null
                            },
                            plain_text: geo,
                            "href": null
                        }
                    ]
                },
                "–ê–¥—Ä–µ—Å": {
                    type: "rich_text",
                    rich_text: [
                        {
                            type: "text",
                            text: {
                                content: geo,
                                "link": null
                            },
                            plain_text: geo,
                            "href": null
                        }
                    ]
                },
            },
        })
        //console.log(response)
        console.log("Success! Entry address added. " + response.id)

        //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–∞–∑—É
        const project_id = await addProject(projectname, datestart, teh, managerId, companyId, worklist, equipmentlist, response.id);

        return project_id

    } catch (error) {
        console.error(error.body)
    }
}


//-------------------------------------------------------------------------------------------------------

bot.setMyCommands([
    // {command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
    // {command: '/menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'},
    // {command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ'},
    // {command: '/settings', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'},
])

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const firstname = msg.from.first_name
    const lastname = msg.from.last_name
    const text = msg.text;
    const messageId = msg.message_id;

    try {
        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥

        // –∫–æ–º–∞–Ω–¥–∞ –°—Ç–∞—Ä—Ç
        if (text === '/start') {
            //–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
            const user = await UserBot.findOne({where:{chatId: chatId.toString()}})
            if (!user) {
                await UserBot.create({ firstname: firstname, lastname: lastname, chatId: chatId })
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î')
            } else {
                console.log('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –ë–î. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            }
        
            await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç U.L.E.Y_Projects. –°–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã U.L.E.Y –≤ ' +
                'web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä—è–º–æ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ Telegram.', {
                reply_markup: ({
                    inline_keyboard:[
                        [{text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data:'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}, {text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data:'–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}],
                        [{text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç—ã U.L.E.Y', web_app: {url: webAppUrl}}],
                    ]
                })
            })
        }
      
        // –∫–æ–º–∞–Ω–¥–∞ –ú–µ–Ω—é
        if (text === '/menu') {
            await bot.sendMessage(chatId, '–°–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã U.L.E.Y –≤ web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä—è–º–æ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ Telegram.', {
                reply_markup: ({
                    inline_keyboard:[
                        [{text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data:'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}, {text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data:'–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}],
                        [{text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç—ã U.L.E.Y', web_app: {url: webAppUrl}}],
                    ]
                })
            })
        }     
      
        // –∫–æ–º–∞–Ω–¥–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (text === '/information') {
            const user = await UserBot.findOne({where:{chatId: chatId.toString()}})
            await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, ${firstname} ${lastname}! –ß–∞—Ç-–±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ U.L.E.Y –∏ –æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤.`);
        }
      
        //–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π    
        if ((text || '')[0] !== '/') {       
            if (text.includes("–û—Ç–≤–µ—Ç")) {           
                await bot.sendMessage(text.substring(6, text.indexOf('.')), text.slice(text.indexOf('.') + 2))       
            
            } else if (text.includes('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')) {           
                await bot.sendMessage(chatTelegramId, `${text} \n \n –æ—Ç ${firstname} ${lastname} ${chatId}`)
                await bot.sendMessage(chatGiaId, `${text} \n \n –æ—Ç ${firstname} ${lastname} ${chatId}`)

                //—Å–æ–∑–¥–∞—Ç—å –±–µ—Å–µ–¥—É –≤ –∞–¥–º–∏–Ω–∫–µ –≤ –±–¥ 
                let  conversation_id              
                try {                  
                    //–Ω–∞–π—Ç–∏ –±–µ—Å–µ–¥—É
                    const conversation = await Conversation.findAll({
                        where: {
                            members: {
                                [Op.contains]: [chatId]
                            }
                        },
                    })             

                    //–µ—Å–ª–∏ –Ω–µ—Ç –±–µ—Å–µ–¥—ã, —Ç–æ —Å–æ–∑–¥–∞—Ç—å 
                    if (conversation.length === 0) {
                        const conv = await Conversation.create(
                        {
                            members: [chatId, chatTelegramId],
                        })
                        console.log("–ë–µ—Å–µ–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: ", conv.id) 
                        console.log("conversationId: ", conv.id)
                        
                        conversation_id = conv.id
                    } else {
                        console.log('–ë–µ—Å–µ–¥–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î')  
                        console.log("conversationId: ", conversation[0].id)  
                        
                        conversation_id = conversation[0].id
                    }
                } catch (error) {
                    console.log(error)
                }

                
                //-------------------------------------------------------------------------------------------------------------------------------
                //--------------------------- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ----------------------------------------------------------------------------------
                //-------------------------------------------------------------------------------------------------------------------------------
                //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –≤ –ë–î –ü–ª–æ—â–∞–¥–∫–∏ (–ê–¥—Ä–µ—Å) –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                if (Geo != '') {
                    projectId = await addAddress(Geo, projectName, dateStart, Teh, manager_id, company_id, Worklist, Equipmentlist);
                } else {
                    //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–∞–∑—É
                    projectId = await addProjectNotGeo(projectName, dateStart, Teh, manager_id, company_id, Worklist, Equipmentlist);
                }

                //–ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ (8 —Å–µ–∫—É–Ω–¥)
                setTimeout(async () => {
                    console.log("projectId: ", projectId)
                    if (projectId !== 'undefined') {
                        blockId = await getBlocks(projectId);
                        console.log("blockId: ", blockId)
                    } else {
                        console.log("–ü—Ä–æ–µ–∫—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î!")
                    }
                    
                }, 8000)

                // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                setTimeout(() => {bot.sendMessage(chatId, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!')}, 30000) // 30 —Å–µ–∫—É–Ω–¥

                let count_fio;
                let count_title;
                let count_title2;
                const arr_cat = ['Sound', 'Light', 'Video', 'Riggers', 'Stagehands', 'StageGround', 'Trucks', 'Production']
                const arr_cat2 = ['Sound', 'Light', 'Video', 'Riggers', 'StageGround', 'Trucks', 'Production']
                let i = 0;
                let arr_count = [] 
                let arr_all = [] 

                
                // –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 –º–∏–Ω—É—Ç—É
    //             let timerId = setInterval(async() => {
    //                 i++
                    
    //                 let databaseBlock = await getDatabaseId(blockId); 
    //                 //console.log("databaseBlock: ", JSON.stringify(databaseBlock))

    //                 arr_count = [] 
                    
    //                 arr_cat.map((arritem) => {
    //                     count_fio = 0;
    //                     count_title = 0;
    //                     if (databaseBlock) {
    //                         databaseBlock.map((value) => {
    //                             if (arritem === value.title) {
    //                                 if (value.fio) {
    //                                     count_fio++               
    //                                 }else {
    //                                     count_fio;
    //                                 }  
    //                                 count_title++;
    //                             }
    //                         })
    //                         if (count_fio != 0) {
    //                             const obj = {
    //                                 title2: arritem,
    //                                 count_fio: count_fio,
    //                                 count_title: count_title,
    //                             }
    //                             arr_count.push(obj)
    //                         } else if (count_title !=0) {
    //                             const obj = {
    //                                 title2: arritem,
    //                                 count_fio: count_fio,
    //                                 count_title: count_title,
    //                             }
    //                             arr_count.push(obj) 
    //                         }
    //                     }              
    //                 })

    //                 //—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ 2-—Ö —ç–ª–µ–º–µ–Ω—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤
    //                 if (i % 2 == 0) {
    //                     arr_all[0] = arr_count
    //                 } else {
    //                     arr_all[1] = arr_count 
    //                 }

    //                 var isEqual = JSON.stringify(arr_all[0]) === JSON.stringify(arr_all[1]);
    //                 // –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–∞–≤–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤    
    //                 if (!isEqual) {
    //                     //–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –±–æ—Ç–∞
    //                     await bot.sendMessage(chatId, 
    //                         `–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: 

    // ${arr_count.map(item =>projectDate +' | ' + projectTime + ' | ' + projectName + ' | ' + 'U.L.E.Y' + ' = ' + item.count_fio + '\/' + item.count_title + ' [' + item.title2 + ']').join('\n')}`
                                                                    
    //                     )
    //                 } else {
                        
    //                 }

    //             }, 60000); //–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É 

                // 1. –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç 
                // setTimeout(() => {
                //     bot.sendMessage(chatId, 
                //         `${arr_count.map(item =>projectDate +' | ' + projectTime + ' | ' + projectName + ' | ' + 'U.L.E.Y' + ' = ' + item.count_fio + '\/' + item.count_title + ' [' + item.title2 + ']').join('\n')}`                                                    
                //     )
                // }, 1800000)

                // setTimeout(() => {
                //     bot.sendMessage(chatId, 
                //         `${arr_count.map(item =>projectDate +' | ' + projectTime + ' | ' + projectName + ' | ' + 'U.L.E.Y' + ' = ' + item.count_fio + '\/' + item.count_title + ' [' + item.title2 + ']').join('\n')}`                                                    
                //     )
                // }, 3600000)
                
                // 2. –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å
                // 3. –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞ (260 –º–∏–Ω—É—Ç) 

                // –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ 260 –º–∏–Ω—É—Ç
                //setTimeout(() => { clearInterval(timerId); }, 15600000); //260 –º–∏–Ω—É—Ç     

            } else if (text.includes('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤')) {  
                
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
                let socket = io('https://proj.uley.team:9000');
                socket.on("welcome", async message=> {
                    console.log(message)
                });

                socket.emit("addUser", chatId)
                socket.on("getUsers", users => {
                    console.log("users from bot: ", users);
                })

                socket.emit("sendMessage", {
                    senderId: chatTelegramId,
                    receiverId: chatId,
                    text: text,
                })

                // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                let conversation_id
                try {
                    //–Ω–∞–π—Ç–∏ –±–µ—Å–µ–¥—É
                    const conversation = await Conversation.findAll({
                        where: {
                            members: {
                                [Op.contains]: [chatId]
                            }
                        },
                    })             

                    //–µ—Å–ª–∏ –Ω–µ—Ç –±–µ—Å–µ–¥—ã, —Ç–æ —Å–æ–∑–¥–∞—Ç—å 
                    if (conversation.length === 0) {
                        const conv = await Conversation.create(
                        {
                            members: [chatId, chatTelegramId],
                        })
                        console.log("conversationId: ", conv.id)
                        conversation_id = conv.id
                    } else {
                        console.log('–ë–µ—Å–µ–¥–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î')  
                        console.log("conversationId: ", conversation[0].id)  
                        conversation_id = conversation[0].id
                    }

                    const messageDB = await Message.create(
                    {
                        text: text, 
                        from: chatId, 
                        to: chatTelegramId,
                        messageType: 'text',
                        conversationId: conversation_id,
                    })
                } catch (error) {
                    console.log(error);
                }

            } else {

                // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                let conversation_id
                try {
                    //–Ω–∞–π—Ç–∏ –±–µ—Å–µ–¥—É
                    const conversation = await Conversation.findAll({
                        where: {
                            members: {
                                [Op.contains]: [chatId]
                            }
                        },
                    })             

                    //–µ—Å–ª–∏ –Ω–µ—Ç –±–µ—Å–µ–¥—ã, —Ç–æ —Å–æ–∑–¥–∞—Ç—å 
                    if (conversation.length === 0) {
                        const conv = await Conversation.create(
                        {
                            members: [chatId, chatTelegramId],
                        })
                        console.log("conversationId: ", conv.id)
                        conversation_id = conv.id
                    } else {
                        console.log('–ë–µ—Å–µ–¥–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î')  
                        console.log("conversationId: ", conversation[0].id)  
                        conversation_id = conversation[0].id
                    }

                    const messageDB = await Message.create(
                    {
                        text: text, 
                        from: chatId, 
                        to: chatTelegramId,
                        messageType: 'text',
                        conversationId: conversation_id,
                    })
                } catch (error) {
                    console.log(error);
                }
                // –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                await bot.sendMessage(chatId, `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "${text}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`)
                await bot.sendMessage(chatTelegramId, `${text} \n \n –æ—Ç ${firstname} ${lastname} ${chatId}`)           
            }
        }
    
    
        if (text === '/getmessage') {
            //–ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
            try {
                const message_admin = await Message.findAll({where: {to: chatId.toString()}})
                console.log(message_admin)
            } catch (error) {
                console.log(error)
            }
        }

        if (text == '/function') {
            newDatabase2()

        }

        if (text == '/setconversation') {
            //const users = await UserBot.findAll()
            let users = [];

            await fetch('https://proj.uley.team:8000/managers')
                .then(res => res.json())
                .then(json => {
                    console.log("Name of the first user in the array:");
                    //console.log("users: ", json)

                    users = json.map(item => ({
                        // –¢–∞–∫ —Å—Å—ã–ª–∫–∞ –Ω–µ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —á–∏—Å—Ç
                        id: item.id,
                        fio: item.fio,
                        tgID: item.tgID,
                        phone: item.phone,
                      }))

            })     

            //console.log("user: ", users)

            users.map(async (item) => {  

                let conversation_id
                try {

                    //1. –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
                    if (item.tgID) {
                        const user = await UserBot.findOne({where:{chatId: item.tgID}})
                        //console.log("user: ", user)

                        if (user === null) {
                            await UserBot.create({ firstname: item.fio, lastname: "", chatId: item.tgID })
                            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î')
                        } else {
                            console.log('–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –ë–î. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                        } 
                    }                  

                    //2. –Ω–∞–π—Ç–∏ –±–µ—Å–µ–¥—É
                    // const conversation = await Conversation.findAll({
                    //     where: {
                    //         members: {
                    //             [Op.contains]: [item.tgID]
                    //         }
                    //     },
                    // })             

                    // //3. –µ—Å–ª–∏ –Ω–µ—Ç –±–µ—Å–µ–¥—ã, —Ç–æ —Å–æ–∑–¥–∞—Ç—å 
                    // if (conversation.length === 0) {
                    //     const conv = await Conversation.create(
                    //     {
                    //         members: [item.tgID, chatTelegramId],
                    //     })
                    //     console.log("conversationId: ", conv.id)
                    //     conversation_id = conv.id
                    // } else {
                    //     console.log('–ë–µ—Å–µ–¥–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î')  
                    //     console.log("conversationId: ", conversation[0].id)  
                    //     conversation_id = conversation[0].id
                    // }
                    
                } catch (error) {
                    console.log(error);
                }

              });
            
        }

    } catch (error) {
        //await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!');
        console.log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! ', error)
    }
    
  });
  
  //–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏
  bot.on('callback_query', msg => {
      const data = msg.data;
      const chatId = msg.message.chat.id;
  
      if (data === '/menu') {
          return bot.sendMessage(chatId, '–°–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ Notion-–ø—Ä–æ–µ–∫—Ç—ã –≤ web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä—è–º–æ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ Telegram.', {
              reply_markup: ({
                  inline_keyboard:[
                      [{text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data:'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}, {text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data:'–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}],
                      [{text: '–û—Ç–∫—Ä—ã—Ç—å Notion-–ø—Ä–æ–µ–∫—Ç—ã', web_app: {url: webAppUrl}}],
                  ]
              })
          })
      }
      bot.sendMessage(chatId, `–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É ${data}`, backOptions)
  });


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –ø–æ—Å–ª–µ–¥–Ω–∏–π middleware
app.use(errorHandler)

const PORT = process.env.PORT || 8000;

const start = async () => {
    try {
        await sequelize.authenticate()
        await sequelize.sync()
        
        httpsServer.listen(PORT, () => {
            console.log('HTTPS Server Bot running on port ' + PORT);
        });

    } catch (error) {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å–ª–æ–º–∞–ª–æ—Å—å!', error)
    }
}

start()