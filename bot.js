require("dotenv").config();

//telegram api
const TelegramBot = require('node-telegram-bot-api');
const {menuOptions, backOptions} = require('./options')
const token = process.env.TELEGRAM_API_TOKEN
const bot = new TelegramBot(token, {polling: true});
const { Op } = require('sequelize')

// web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const webAppUrl = process.env.WEB_APP_URL;
const botApiUrl = process.env.REACT_APP_API_URL
const socketUrl = process.env.SOCKET_APP_URL

//socket.io
const {io} = require("socket.io-client")

//fetch api
const fetch = require('node-fetch');

//–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
var cron = require('node-cron');

//notion api
const { Client } = require("@notionhq/client");
const notion = new Client({ auth: process.env.NOTION_API_KEY });
const token_fetch = 'Bearer ' + process.env.NOTION_API_KEY;
const databaseId = process.env.NOTION_DATABASE_ID
const databaseAddressId = process.env.NOTION_DATABASE_ADDRESS_ID
const databaseWorkersId = process.env.NOTION_DATABASE_WORKERS_ID
const databaseManagerId = process.env.NOTION_DATABASE_MANAGER_ID
const chatGroupId = process.env.CHAT_GROUP_ID
const chatTelegramId = process.env.CHAT_ID
const chatGiaId = process.env.GIA_CHAT_ID
const host = process.env.HOST
const hostAdmin = process.env.HOST_ADMIN

let projectId, projectName, projectDate, projectTime, dateStart, manager_id, company_id, Geo, Teh, Worklist, Equipmentlist;

//functions
const addTable = require('./bot/common/addTable')
const newDatabase1 = require('./bot/common/newDatabase1')
const newDatabase2 = require('./bot/common/newDatabase2')
const newDatabase3 = require('./bot/common/newDatabase3')
const newDatabase4 = require('./bot/common/newDatabase4')
const newDatabase5 = require('./bot/common/newDatabase5')
const sendMyMessage = require('./bot/common/sendMyMessage')
const getReports = require('./bot/common/getReports')
const getReportsNotion = require("./bot/common/getReportsNotion");
const getReportsTest = require("./bot/common/getReportsTest");
const getBlocks = require('./bot/common/getBlocks')
const getDatabaseId = require('./bot/common/getDatabaseId')
const addPretendent = require('./bot/common/addPretendent')
const getBlocksP = require('./bot/common/getBlocksP')
const getBlock = require('./bot/common/getBlock')

const fs = require('fs');
const express = require('express');
const cors = require('cors');
const https = require('https');
const router = require('./bot/routes/index')
const errorHandler = require('./bot/middleware/ErrorHandling')
const path = require('path')

//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î PostreSQL
const sequelize = require('./bot/connections/db')
const {UserBot, Message, Conversation, Project, Report} = require('./bot/models/models');
const updateToDo = require("./bot/common/updateToDo");
const getProject = require("./bot/common/getProject");
const sendMessageAdmin = require("./bot/common/sendMessageAdmin");
const getProjectNew = require("./bot/common/getProjectNew");
const getAllProjects = require("./bot/common/getAllProjects");

const app = express();

app.use(express.json());
app.use(cors());
app.use(express.static('telegram-webapp-bot'));
app.use(express.static(path.resolve(__dirname, 'static')))
app.use('/', router)

// Certificate
const privateKey = fs.readFileSync('privkey.pem', 'utf8'); //fs.readFileSync('/etc/letsencrypt/live/proj.uley.team/privkey.pem', 'utf8');
const certificate = fs.readFileSync('cert.pem', 'utf8'); //fs.readFileSync('/etc/letsencrypt/live/proj.uley.team/cert.pem', 'utf8');
const ca = fs.readFileSync('chain.pem', 'utf8'); //fs.readFileSync('/etc/letsencrypt/live/proj.uley.team/chain.pem', 'utf8');

const credentials = {
    key: privateKey,
    cert: certificate,
    ca: ca
};

const httpsServer = https.createServer(credentials, app);

//--------------------------------------------------------------------------------------------------------
//              REQUEST
//--------------------------------------------------------------------------------------------------------

//—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø—Ä–æ–µ–∫—Ç–∞) –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
app.post('/web-data', async (req, res) => {
    const {queryId, projectname, datestart, geo, teh, managerId, companyId, worklist = [], equipmentlist = []} = req.body;
    const d = new Date(datestart);
    const year = d.getFullYear();
    const month = String(d.getMonth()+1).padStart(2, "0");
    const day = String(d.getDate()).padStart(2, "0");
    const chas = d.getHours();
    const minut = String(d.getMinutes()).padStart(2, "0");
    try {
        if (worklist.length > 0) {

            console.log("–ù–∞—á–∏–Ω–∞—é —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞—è–≤–∫–µ...")
            projectName = projectname
            projectDate = `${day}.${month}`
            projectTime = `${chas}:${minut}`
            dateStart = datestart
            Teh = teh
            Worklist = worklist
            Equipmentlist = equipmentlist 
            manager_id = managerId
            company_id = companyId
            Geo = geo   
            console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ", projectName)
            
            await bot.answerWebAppQuery(queryId, {
                type: 'article',
                id: queryId,
                title: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
                input_message_content: {
                    parse_mode: 'HTML',
                    message_text: 
  `–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
  
<b>–ü—Ä–æ–µ–∫—Ç:</b> ${projectname} 
<b>–î–∞—Ç–∞:</b> ${day}.${month}.${year}
<b>–í—Ä–µ–º—è:</b> ${chas}:${minut} 
<b>–ê–¥—Ä–µ—Å:</b> ${geo} 
<b>–¢–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ:</b> ${teh}
  
<b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:</b>  
${worklist.map(item =>' - ' + item.spec + ' = ' + item.count + ' —á–µ–ª.').join('\n')}`
              }
        })

        
        //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç-–∞–¥–º–∏–Ω–∫—É
        await bot.sendMessage(chatGroupId, 
  `–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! 
  
–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:  ${projectname} 
–î–∞—Ç–∞: ${day}.${month}.${year}
–í—Ä–µ–º—è: ${chas}:${minut} 
–ê–¥—Ä–µ—Å: ${geo} 
–¢–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ: ${teh} 
  
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã:  
${worklist.map(item => ' - ' + item.spec + ' = ' + item.count + ' —á–µ–ª.').join('\n')}`
          )
  

        } 
        
        if (equipmentlist.length > 0) {
            await bot.answerWebAppQuery(queryId, {
                type: 'article',
                id: queryId,
                title: '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
                input_message_content: {
                    parse_mode: 'HTML',
                    message_text: 
  `–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
  
<b>–ü—Ä–æ–µ–∫—Ç:</b> ${projectname} 
<b>–î–∞—Ç–∞:</b> ${day}.${month}.${year}
<b>–í—Ä–µ–º—è:</b> ${chas}:${minut} 
<b>–ê–¥—Ä–µ—Å:</b> ${geo} 
<b>–¢–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ:</b> ${teh}

<b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b>  
${equipmentlist.map(item =>' - ' + item.subname + ' = ' + item.count + ' —à—Ç.').join('\n')}`
              }
        })

        
        //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç-–∞–¥–º–∏–Ω–∫—É
        await bot.sendMessage(chatGroupId, 
  `–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! 
  
–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:  ${projectname} 
–î–∞—Ç–∞: ${day}.${month}.${year}
–í—Ä–µ–º—è: ${chas}:${minut} 
–ê–¥—Ä–µ—Å: ${geo} 
–¢–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ: ${teh} 

–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:  
${equipmentlist.map(item =>' - ' + item.subname + ' = ' + item.count + ' —à—Ç.').join('\n')}`
          )
  
          projectName = projectname
          projectDate = `${day}.${month}`
          projectTime = `${chas}:${minut}`
          dateStart = datestart
          Teh = teh
          Worklist = worklist
          Equipmentlist = equipmentlist 
          manager_id = managerId
          company_id = companyId
          Geo = geo  

        } 
  
        return res.status(200).json({});
    } catch (e) {
        return res.status(500).json({})
    }
})


//--------------------------------------------------------------------------------------------------

//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Notion (addProject send data to notion)
async function addProject(title, time, teh, managerId, companyId, worklist, equipmentlist, geoId) {
    try {
        const response = await notion.pages.create({
            parent: { database_id: databaseId },
            icon: {
                type: "emoji",
                emoji: "üü¶"
            },
            properties: {
                Name: {
                    title:[
                        {
                            "text": {
                                "content": title
                            }
                        }
                    ]
                },
                "–î–∞—Ç–∞": {
                    type: 'date',
                    date: {
                        "start": time,
                        "end": null,
                        "time_zone": "Europe/Moscow"
                    }
                },
                "–¢–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ": {
                    type: 'rich_text',
                    rich_text: [
                        {
                            type: 'text',
                            text: {
                                content: teh,
                            },
                        }
                        ],
                },
                "–ü–æ—Å—Ç–µ—Ä": {
                    type: 'rich_text',
                    rich_text: [
                        {
                            type: 'text',
                            text: {
                                content: '–î–∞–Ω–Ω—ã–µ | –î–∞–Ω–Ω—ã–µ | –î–∞–Ω–Ω—ã–µ * 10 ‚Äî 12 —á–∞—Å–æ–≤ * 0 000.00 ‚Äî 0 000.00 —Ä—É–±/—á–∞—Å ',
                            },
                        }
                        ],
                },
                "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞": {
                    type: 'select',
                    select: {
                        "id": "4f52b59e-2d7f-4a13-976f-f9773274825d",
                        "name": "New",
                        "color": "blue"
                    }
                },
                "–ì–æ—Ä–æ–¥": {
                    type: 'select',
                    select: {
                        "id": "4e370773-fb5d-4ef7-bd2a-eaa91e5919e0",
                        "name": "Test",
                        "color": "brown"
                    }
                },
                "–ú–µ–Ω–µ–¥–∂–µ—Ä": {
                    type: "relation",
                    relation: [
                        {
                            "id": managerId
                        }
                    ]
                },
                "–ö–æ–º–ø–∞–Ω–∏—è": {
                    type: "relation",
                    relation: [
                        {
                            "id": companyId
                        }
                    ]
                },
                "–ü–ª–æ—â–∞–¥–∫–∞": {
                    "type": "relation",
                    "relation": [
                        {
                            "id": geoId
                        }
                    ],
                    "has_more": false
                },
                // "–°–ø–µ—Ü–∏—Ñ–∏–∫–∞": {
                //     "multi_select": {
                //         "options": [
                            
                //         ]
                //     }
                // },
            }
        })
        //console.log(response)
        const res_id = response.id;
        console.log(new Date())
        console.log("1. –ü—Ä–æ–µ–∫—Ç —Å –∞–¥—Ä–µ—Å–æ–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! " + res_id)

        await addTable(res_id)                     //—Å–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫

        //await newDatabase1(res_id);                //—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"    
        await newDatabase2(res_id, worklist, time);//—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤"   
        await newDatabase3(res_id);                //—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–ó–∞–ø–∞—Å–Ω–æ–π —Å–æ—Å—Ç–∞–≤"
        await newDatabase5(res_id);                //—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–ü—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç—ã"   
        await newDatabase4(res_id, equipmentlist); //—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"

        return res_id;

    } catch (error) {
        console.error(error.message)
    }
}


//–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ Notion –±–µ–∑ –∞–¥—Ä–µ—Å–∞ (addProjectNotGeo)
async function addProjectNotGeo(title, time, teh, managerId, companyId, worklist, equipmentlist) {
    try {
        const response = await notion.pages.create({
            parent: { database_id: databaseId },
            icon: {
                type: "emoji",
                emoji: "üü¶"
            },
            properties: {
                Name: {
                    title:[
                        {
                            "text": {
                                "content": title
                            }
                        }
                    ]
                },
                "–î–∞—Ç–∞": {
                    type: 'date',
                    date: {
                        "start": time,
                        "end": null,
                        "time_zone": "Europe/Moscow"
                    }
                },
                "–¢–µ—Ö. –∑–∞–¥–∞–Ω–∏–µ": {
                    type: 'rich_text',
                    rich_text: [
                        {
                            type: 'text',
                            text: {
                                content: teh,
                            },
                        }
                        ],
                },
                "–ü–æ—Å—Ç–µ—Ä": {
                    type: 'rich_text',
                    rich_text: [
                        {
                            type: 'text',
                            text: {
                                content: '–î–∞–Ω–Ω—ã–µ | –î–∞–Ω–Ω—ã–µ | –î–∞–Ω–Ω—ã–µ * 10 ‚Äî 12 —á–∞—Å–æ–≤ * 0 000.00 ‚Äî 0 000.00 —Ä—É–±/—á–∞—Å ',
                            },
                        }
                        ],
                },
                "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞": {
                    type: 'select',
                    select: {
                        "id": "4f52b59e-2d7f-4a13-976f-f9773274825d",
                        "name": "New",
                        "color": "blue"
                    }
                },
                "–ì–æ—Ä–æ–¥": {
                    type: 'select',
                    select: {
                        "id": "4e370773-fb5d-4ef7-bd2a-eaa91e5919e0",
                        "name": "Test",
                        "color": "brown"
                    }
                },
                "–ú–µ–Ω–µ–¥–∂–µ—Ä": {
                    type: "relation",
                    relation: [
                        {
                            "id": managerId
                        }
                    ]
                },
                "–ö–æ–º–ø–∞–Ω–∏—è": {
                    type: "relation",
                    relation: [
                        {
                            "id": companyId
                        }
                    ]
                },
            }
        })
        //console.log(response)
        const res_id = response.id;
        console.log(new Date())
        console.log("1. –ü—Ä–æ–µ–∫—Ç –±–µ–∑ –∞–¥—Ä–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! " + res_id)        

        await addTable(res_id);                     //—Å–æ–∑–¥–∞—Ç—å –≤–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫
        
        //await newDatabase1(res_id);                //—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"    
        await newDatabase2(res_id, worklist, time);//—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–û—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤"   
        await newDatabase3(res_id);                //—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–ó–∞–ø–∞—Å–Ω–æ–π —Å–æ—Å—Ç–∞–≤"
        await newDatabase5(res_id);                //—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–ü—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç—ã"   
        await newDatabase4(res_id, equipmentlist); //—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"

        return res_id;

    } catch (error) {
        console.error(error.message)
    }
}

//----------------------------------------------------------------------------------------------------------------

//send data to notion
async function addAddress(geo, projectname, datestart, teh, managerId, companyId, worklist, equipmentlist) {
    try {
        const response = await notion.pages.create({
            parent: { database_id: databaseAddressId },
            properties: {
                "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–æ—â–∞–¥–∫–∏": {
                    type: "title",
                    title: [
                        {
                            type: "text",
                            text: {
                                content: geo,
                                "link": null
                            },
                            plain_text: geo,
                            "href": null
                        }
                    ]
                },
                "–ê–¥—Ä–µ—Å": {
                    type: "rich_text",
                    rich_text: [
                        {
                            type: "text",
                            text: {
                                content: geo,
                                "link": null
                            },
                            plain_text: geo,
                            "href": null
                        }
                    ]
                },
            },
        })
        //console.log(response)
        console.log("0. –ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! " + response.id)

        //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–∞–∑—É
        const project_id = await addProject(projectname, datestart, teh, managerId, companyId, worklist, equipmentlist, response.id);

        return project_id

    } catch (error) {
        console.error(error.message)
    }
}


//-------------------------------------------------------------------------------------------------------

bot.setMyCommands([
    // {command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
    // {command: '/menu', description: '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'},
    // {command: '/info', description: '–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ'},
    // {command: '/settings', description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'},
])

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const firstname = msg.from.first_name
    const lastname = msg.from.last_name
    const text = msg.text ? msg.text : '';
    const messageId = msg.message_id;

    //console.log("msg: ", msg)
    //console.log("text: ", text)

    try {
        // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        // –∫–æ–º–∞–Ω–¥–∞ –°—Ç–∞—Ä—Ç
        if (text === '/start') {
            //–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
            const user = await UserBot.findOne({where:{chatId: chatId.toString()}})
            if (!user) {
                await UserBot.create({ firstname: firstname, lastname: lastname, chatId: chatId })
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î')
            } else {
                console.log('–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ë–î. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            }
        
            await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç U.L.E.Y_Projects. –°–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã U.L.E.Y –≤ ' +
                'web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä—è–º–æ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ Telegram.', {
                reply_markup: ({
                    inline_keyboard:[
                        [{text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data:'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}, {text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data:'–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}],
                        [{text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç—ã U.L.E.Y', web_app: {url: webAppUrl}}],
                    ]
                })
            })
        }
      
        // –∫–æ–º–∞–Ω–¥–∞ –ú–µ–Ω—é
        if (text === '/menu') {
            await bot.sendMessage(chatId, '–°–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã U.L.E.Y –≤ web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä—è–º–æ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ Telegram.', {
                reply_markup: ({
                    inline_keyboard:[
                        [{text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data:'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}, {text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data:'–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}],
                        [{text: '–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç—ã U.L.E.Y', web_app: {url: webAppUrl}}],
                    ]
                })
            })
        }     
      
        // –∫–æ–º–∞–Ω–¥–∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (text === '/information') {
            const user = await UserBot.findOne({where:{chatId: chatId.toString()}})
            await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, ${firstname} ${lastname}! –ß–∞—Ç-–±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ U.L.E.Y –∏ –æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–æ–≤.`);
        }


        // –∫–æ–º–∞–Ω–¥–∞ –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ü—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç—ã
        if (text === '/addpretendents') {
            const project_id = 'e9fcd9a3-726f-4ae7-bc01-a9d2c84a3e0e'; 
            await newDatabase5(project_id);
        }

        if(text.startsWith('/startreports')) {
            const project = text.split(' ');

            const project2 = await Project.findOne({ where:{ id: project[1] } })

            //–Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã
            getReportsTest(project2, bot)
        }


        if(text.startsWith('/startnotif')) {
            //task1.stop();
            //console.log("–ó–∞–¥–∞—á–∞ 1 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
            let socket = io(socketUrl);
            socket.emit("sendNotif", {
                task: 2
            }) 
        }


        if(text.startsWith('/startnotionreports')) {
            const project = text.split(' ');

            const res = await fetch(`${botApiUrl}/project/${project[1]}`)
            .then((response) => response.json())
            .then((data) => {
                console.log("–ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω!") 
                //–Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã
                getReportsNotion(data, bot)                           
            }); 
        }

//------------------------------------------------------------------------------------------------

        //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        if (msg.contact) {
            await bot.sendMessage(chatId, `–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω!`)
            const phone = msg.contact.phone_number
            const firstname = msg.contact.first_name
            const lastname = msg.contact.last_name ? msg.contact.last_name : ''
            
            //const response = await bot.sendContact(chatTelegramId, phone, firstname, lastname, vcard)  
            //const response2 = await bot.sendContact(chatGiaId, phone, firstname, lastname, vcard)   
            const text_contact = `${phone} ${firstname} ${lastname}`

            console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–Ω—Ç–∞–∫—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...")

            //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            const convId = await sendMyMessage(text_contact, "text", chatId, messageId)
                
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket
                let socket = io(socketUrl);
                socket.emit("addUser", chatId)
                 
                //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫—É
                socket.emit("sendMessage", {
                     senderId: chatId,
                     receiverId: chatTelegramId,
                     text: text_contact,
                     type: 'text',
                     convId: convId,
                     messageId: messageId,
                 })
        }
//--------------------------------------------------------------------------------------------------
        //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if (msg.document) {
            console.log(msg.document)
            const docum = await bot.getFile(msg.document.file_id);
            try {
                const res = await fetch(
                    `https://api.telegram.org/bot${token}/getFile?file_id=${docum.file_id}`
                );

                // extract the file path
                const res2 = await res.json();
                const filePath = res2.result.file_path;

                // now that we've "file path" we can generate the download link
                const downloadURL = `https://api.telegram.org/file/bot${token}/${filePath}`;

                https.get(downloadURL,(res) => {
                    const filename = Date.now()
                    // Image will be stored at this path
                    let path;
                    let ras;
                    if(msg.document) {
                        ras = msg.document.mime_type.split('/')
                        //path = `${__dirname}/static/${filename}.${ras[1]}`; 
                        path = `${__dirname}/static/${msg.document.file_name}`; 
                    }
                    const filePath = fs.createWriteStream(path);
                    res.pipe(filePath);
                    filePath.on('finish', async () => {
                        filePath.close();
                        console.log('Download Completed: ', path); 
                        
                        let convId;
                        if(msg.document) {
                            // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                            convId = await sendMyMessage(`${botApiUrl}/${msg.document.file_name}`, 'file', chatId, messageId)
                        }

                        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket
                        let socket = io(socketUrl);
                        socket.emit("addUser", chatId)
                        socket.emit("sendMessage", {
                            senderId: chatId,
                            receiverId: chatTelegramId,
                            text: `${botApiUrl}/${msg.document.file_name}`,
                            convId: convId,
                        })
                    })
                })
            } catch (error) {
                console.log(error.message)
            }
        }
//----------------------------------------------------------------------------------------------------------------          
        //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (msg.photo) {
            console.log(msg.photo)
            //console.log(msg.photo.length)
            const image = await bot.getFile(msg.photo[msg.photo.length-1].file_id);

            try {
                const res = await fetch(
                    `https://api.telegram.org/bot${token}/getFile?file_id=${image.file_id}`
                );

                // extract the file path
                const res2 = await res.json();
                const filePath = res2.result.file_path;

                // now that we've "file path" we can generate the download link
                const downloadURL = `https://api.telegram.org/file/bot${token}/${filePath}`;

                https.get(downloadURL,(res) => {
                    const filename = Date.now()
                    // Image will be stored at this path
                    const path = `${__dirname}/static/${filename}.jpg`; 
                    const filePath = fs.createWriteStream(path);
                    res.pipe(filePath);
                    filePath.on('finish', async () => {
                        filePath.close();
                        console.log('Download Completed: ', path); 
                        
                        // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                        const convId = await sendMyMessage(`${botApiUrl}/${filename}.jpg`, 'image', chatId, messageId)

                        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket
                        let socket = io(socketUrl);

                        socket.emit("addUser", chatId)
                        //socket.on("getUsers", users => {
                            //console.log("users from bot: ", users);
                        //})

                        socket.emit("sendMessage", {
                            senderId: chatId,
                            receiverId: chatTelegramId,
                            text: `${botApiUrl}/${filename}.jpg`,
                            type: 'image',
                            convId: convId,
                        })
                    })
                })            
            } catch (error) {
                console.log(error.message)
            }
        }
//---------------------------------------------------------------------------------------------------------------

 //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–π
 if (msg.voice) {
    await bot.sendMessage(chatId, `–í–∞—à–µ –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!`)
    const voice = await bot.getFile(msg.voice.file_id);

    try {
        const res = await fetch(
            `https://api.telegram.org/bot${token}/getFile?file_id=${voice.file_id}`
        );

        // extract the file path
        const res2 = await res.json();
        const filePath = res2.result.file_path;

        // now that we've "file path" we can generate the download link
        const downloadURL = `https://api.telegram.org/file/bot${token}/${filePath}`;

        https.get(downloadURL,(res) => {
            const filename = Date.now()
            // Image will be stored at this path
            let path;
            let ras;
            if(msg.voice) {
                ras = msg.voice.mime_type.split('/')
                //path = `${__dirname}/static/${filename}.${ras[1]}`; 
                path = `${__dirname}/static/${msg.voice.file_unique_id}.${ras[1]}`; 
            }
            const filePath = fs.createWriteStream(path);
            res.pipe(filePath);
            filePath.on('finish', async () => {
                filePath.close();
                console.log('Download Completed: ', path); 
                
                let convId;
                if(msg.voice) {
                    // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                    convId = await sendMyMessage(`${botApiUrl}/${msg.voice.file_name}`, 'file', chatId, messageId)
                }

                //–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket
                let socket = io(socketUrl);
                socket.emit("addUser", chatId)
                socket.emit("sendMessage", {
                    senderId: chatId,
                    receiverId: chatTelegramId,
                    text: `${botApiUrl}/${msg.voice.file_name}`,
                    convId: convId,
                })
            })
        })            
    } catch (error) {
        console.log(error.message)
    }
}

//----------------------------------------------------------------------------------------------------------------      
        
        //–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π    
        if ((text || '')[0] !== '/' && text) {       
            if (text.startsWith("Reply")) {           
                await bot.sendMessage(text.substring(6, text.indexOf('.')), text.slice(text.indexOf('.') + 2)) 

            // –ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
            } else if (text.startsWith('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')) {           
                const response = await bot.sendMessage(chatTelegramId, `${text} \n \n –æ—Ç ${firstname} ${lastname} ${chatId}`)

                console.log("–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å...")

                //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                const convId = await sendMyMessage(text, "text", chatId, response.message_id)
                
                // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket
                let socket = io(socketUrl);
                socket.emit("addUser", chatId)
                 
                //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω–∫—É
                socket.emit("sendMessage", {
                     senderId: chatId,
                     receiverId: chatTelegramId,
                     text: text,
                     type: 'text',
                     convId: convId,
                     messageId: response.message_id,
                 })


                //–º–∞—Å—Å–∏–≤ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
                let specArr = []
                console.log("–°–æ—Ö—Ä–∞–Ω—è—é Worklist –≤ –ë–î: ", Worklist)
                if (Worklist !== '') {
                    specArr = Worklist.map(item => ({
                        spec: item.spec,
                        cat: item.cat,
                        count: item.count,
                    }));
                }

                //–º–∞—Å—Å–∏–≤ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
                let equipArr = []
                console.log("–°–æ—Ö—Ä–∞–Ω—è—é Equipmentlist –≤ –ë–î: ", Equipmentlist)
                if (Equipmentlist !== '') {
                    equipArr = Equipmentlist.map(item => ({
                        name: item.spec,
                        subname: item.subname,
                        cat: item.cat,
                        count: item.count,
                    }));
                } 

                try {
                    //—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ë–î
                    const res = await Project.create({ 
                        name: projectName, 
                        datestart: dateStart, 
                        spec: JSON.stringify(specArr),
                        equipment: JSON.stringify(equipArr),
                        teh: Teh, 
                        geo: Geo, 
                        managerId: manager_id, 
                        companyId: company_id, 
                        chatId: chatId
                    })

                    //–æ—á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    console.log("–û—á–∏—â–∞—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ...")
                    projectName = '';
                    projectDate = '';
                    projectTime = '';
                    dateStart = '';
                    Teh = '';
                    //Worklist = [];
                    //Equipmentlist = [];
                    manager_id = '';
                    company_id = '';
                    Geo = '';

                    console.log('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î! Project: ' + res.name)  
                    
                    const project = await Project.findOne({where:{id: res.id}})
                
//-------------------------------------------------------------------------------------------------------------------------------
//--------------------------- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ ----------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------------------
                    //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –≤ –ë–î –ü–ª–æ—â–∞–¥–∫–∏ (–ê–¥—Ä–µ—Å) –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                    if (project.geo != '') {
                        projectId = await addAddress(project.geo, project.name, project.datestart, project.teh, project.managerId, project.companyId, Worklist, Equipmentlist);
                    } else {
                        //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞ –≤ –±–∞–∑—É
                        projectId = await addProjectNotGeo(project.name, project.datestart, project.teh, project.managerId, project.companyId, Worklist, Equipmentlist);
                    }

                    //–æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç 
                    await Project.update({projectId: projectId},{where: {id: res.id}})

                    // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
                    setTimeout(() => {bot.sendMessage(project.chatId, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!')}, 25000) // 30 —Å–µ–∫—É–Ω–¥                   
                    
                    const project2 = await Project.findOne({where:{id: res.id}})  
                    
                    //–Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã
                    getReports(project2, bot)
                    
                                    
                } catch (error) {
                    console.log(error.message)
                }

            } else {
//----------------------------------------------------------------------------------------------------------------
                //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

                //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                const user = await UserBot.findOne({where:{chatId: chatId.toString()}})
                if (!user) {
                    await UserBot.create({ firstname: firstname, lastname: lastname, chatId: chatId })
                    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î')
                } else {
                    console.log('–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
                }

                //–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                let str_text;
                let reply_id;
                if (msg.reply_to_message) {
                    const message = await Message.findOne({where:{messageId: msg.reply_to_message.message_id.toString()}}) 
                   str_text = `${message.dataValues.text}_reply_${text}`  
                   reply_id = msg.reply_to_message.message_id              
                } else {
                    str_text = text
                }

                // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                const convId = await sendMyMessage(str_text, 'text', chatId, messageId, reply_id)

                // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket
                let socket = io(socketUrl);

                socket.emit("addUser", chatId)

                socket.emit("sendMessage", {
                    senderId: chatId,
                    receiverId: chatTelegramId,
                    text: str_text,
                    type: 'text',
                    convId: convId,
                    messageId: messageId,
                    replyId: reply_id,
                })


                // –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                //await bot.sendMessage(chatId, `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "${text}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`)
                await bot.sendMessage(chatTelegramId, `${str_text} \n \n –æ—Ç ${firstname} ${lastname} ${chatId}`)           
            }
        }

    } catch (error) {
        console.log('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞! ', error.message)
    }
    
  });

//--------------------------------------------------------------------------------------------------------------------
  
  //–û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏
  bot.on('callback_query', async (msg) => {
    const data = msg.data;
    const chatId = msg.message.chat.id;
    const messageId = msg.message.message_id;
  
    if (data === '/menu') {
        return bot.sendMessage(chatId, '–°–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ Notion-–ø—Ä–æ–µ–∫—Ç—ã –≤ web-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä—è–º–æ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ Telegram.', {
            reply_markup: ({
                inline_keyboard:[
                    [{text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data:'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'}, {text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data:'–ù–∞—Å—Ç—Ä–æ–π–∫–∏'}],
                    [{text: '–û—Ç–∫—Ä—ã—Ç—å Notion-–ø—Ä–æ–µ–∫—Ç—ã', web_app: {url: webAppUrl}}],
                ]
            })
        })
    }

    if (data.startsWith('/smeta')) {
        const projectId = data.split(' ');
        console.log("projectId: ", projectId[1])
        console.log("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–º–µ—Ç—ã...")

        const crmId = await getProject(projectId[1])

        const block1 = await getBlock(projectId[1])
        console.log("block1: ", block1.results[0].id)
                        
        const block2 = await getBlock(block1.results[0].id)
        console.log("block2: ", block2.results[0].id)
                        
        const block3 = await getBlock(block2.results[0].id)
        console.log("block3: ", block3.results[0].id)
             
        await updateToDo(block3.results[0].id);

        const poster = `${host}/files/${crmId}/pre/${crmId}_${chatId}_customer_1.pdf`
        console.log("poster: ", poster)

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket
        let socket = io(socketUrl);
        socket.emit("addUser", chatId)

        //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å–º–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        const convId = await sendMyMessage('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!', "text", chatId)

        socket.emit("sendMessage", {
            senderId: chatId,
            receiverId: chatTelegramId,
            text: '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!',
            convId: convId,
            messageId: messageId,
            replyId: ''
        })

        return bot.sendMessage(chatId, '–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!')
    }

    if (data === '/report') {

        //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        const convId = await sendMyMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤ —Ä–∞—Å—Å—ã–ª–∫–µ', "text", chatId)

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket
        let socket = io(socketUrl);
        socket.emit("addUser", chatId)
        socket.emit("sendMessage", {
            senderId: chatId,
            receiverId: chatTelegramId,
            text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≤ —Ä–∞—Å—Å—ã–ª–∫–µ',
            convId: convId,
            messageId: messageId,
        })


        return bot.sendMessage(chatId, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
    }


    //–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å"
    if (data.startsWith('/accept')) {
        const projectId = data.split(' ');
        console.log("projectId: ", projectId[1])

        const blockId = await getBlocksP(projectId[1]); 
        
        //–î–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –ü—Ä–µ—Ç–µ–Ω–¥–µ–Ω—Ç—ã
        await addPretendent(blockId);

        //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        const convId = await sendMyMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å" –≤ —Ä–∞—Å—Å—ã–ª–∫–µ', "text", chatId)

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket
        let socket = io(socketUrl);
        socket.emit("addUser", chatId)
        socket.emit("sendMessage", {
            senderId: chatId,
            receiverId: chatTelegramId,
            text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å" –≤ —Ä–∞—Å—Å—ã–ª–∫–µ',
            convId: convId,
            messageId: messageId,
        })

        return bot.sendMessage(chatId, '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
    }

    //–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–æ–Ω–∏—Ç—å"
    if (data === '/cancel') {
        //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        const convId = await sendMyMessage('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –≤ —Ä–∞—Å—Å—ã–ª–∫–µ', "text", chatId)

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É socket
        let socket = io(socketUrl);
        socket.emit("addUser", chatId)
        socket.emit("sendMessage", {
            senderId: chatId,
            receiverId: chatTelegramId,
            text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –≤ —Ä–∞—Å—Å—ã–ª–∫–µ',
            convId: convId,
            messageId: messageId,
        })


        return bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ!')
    }


    bot.sendMessage(chatId, `–í—ã –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É ${data}`, backOptions)
  });


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –ø–æ—Å–ª–µ–¥–Ω–∏–π middleware
app.use(errorHandler)

//-------------------------------------------------------------------------------------------------------------------------------
const PORT = process.env.PORT || 8000;

const start = async () => {
    try {
        await sequelize.authenticate()
        await sequelize.sync()
        
        httpsServer.listen(PORT, async () => {
            console.log('HTTPS Server Bot running on port ' + PORT);
            
            //–ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
            //const arrProjects = await getProjectNew()
            let arr = []
            const d = new Date()
            const arrProjects = await getAllProjects()

            console.log("–ó–∞–ø—É—Å–∫–∞—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤...")

            arrProjects.forEach(async(page)=> {
                const blockId = await getBlocks(page.id);
                if (blockId) { 
                    databaseBlock = await getDatabaseId(blockId);  
                    if (databaseBlock && databaseBlock?.length !== 0) {
                        //console.log(databaseBlock)
                        let project = databaseBlock.find(item => new Date(item.date) >= d)
                        const obj = {
                            id: page.id,
                            name: page.name,
                            date: project.date,
                        }
                        arr.push(obj)
                    }
                }
            })

            setTimeout(()=>{
                //console.log("arr: ", arr)

                //–∑–∞–ø—É—Å–∫ –æ—Ç—á–µ—Ç–æ–≤
                console.log('–ó–∞–ø—É—Å–∫–∞—é –æ—Ç—á–µ—Ç—ã –ø—Ä–æ–µ–∫—Ç–æ–≤...');
                
                arr.map(async (project, i) => {
                    console.log(project.name + " - " + project.date)
                    
                    setTimeout(function(){
                        //–Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã
                        getReportsTest(project.id, project.name, bot)
                    }, 2000 * ++i)     
                })
            }, 6000) 
    

        });

    } catch (error) {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —Å–ª–æ–º–∞–ª–æ—Å—å!', error.message)
    }
}

start()